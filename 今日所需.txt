Model层：

package com.liu.model;

public class PageBean {
	private int page;//第几页
	private int pageSize;//每页记录数
	private int start;//起始页
//	private int totalPage;
	public PageBean(int page, int pageSize) {
		super();
		this.page = (page-1)*pageSize;//用于数据库limit起始
		this.pageSize = pageSize;
	}
	public int getPage() {
		return page;
	}
	public void setPage(int page) {
		this.page = page;
	}
	public int getPageSize() {
		return pageSize;
	}
	public void setPageSize(int pageSize) {
		this.pageSize = pageSize;
	}
	public int getStart() {
		return start;
	}
	public void setStart(int start) {
		this.start = start;
	}

	
}


//=======================

Dao层：

package com.liu.dao;

import java.util.Date;
import java.util.List;
import java.util.Map;

import com.liu.model.Blog;

public interface BlogDao {
	public List<Blog> getBlogData();
	public List<Blog> listBlog(Map<String,Object>map);
	public Long getTotal();
	public Blog findById(Integer id);
	public Integer update(Blog blog);
	public Blog getPrevBlog(Date releaseDate);
	public Blog getNextBlog(Date releaseDate);
	public Integer addBlog(Blog blog);
	public Integer deleteBlog(Integer id);
	public Integer getBlogByTypeId(Integer typeId);
	public List<Blog> getAllBlog();
	public List<Blog> listBlogByTypeId(Map<String, Object> map); 
	public Long getTotalByType(Integer id);
//	public List<Blog> listByPage(Map<String,Object>map); 
}




//======================

mapper层：

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 	博客内容映射 -->
<mapper namespace="com.liu.dao.BlogDao">
	<resultMap type="Blog" id="BlogResult">
		<id property="id" column="id"/>
		<result property="title" column="title"/>
		<result property="summary" column="summary"/>
		<result property="releaseDate" column="releaseDate"/>
		<result property="clickHit" column="clickHit"/>
		<result property="replyHit" column="replyHit"/>
		<result property="content" column="content"/>
		<result property="keyWord" column="keyWord"/>
		
		<association property="blogType" column="type_id" select="com.liu.dao.BlogTypeDao.getById">
		</association>
	</resultMap>
	
<!-- 	获取博客文章的日期及博客个数 -->
    <select id="getBlogData" resultMap="BlogResult">
        SELECT 
        DATE_FORMAT(releaseDate,'%Y年%m月') AS releaseDateStr,
        COUNT(*) AS blogCount
        FROM 
        t_blog
        GROUP BY DATE_FORMAT(releaseDate,'%Y年%m月')
        ORDER BY releaseDate DESC
    </select>
<!--     分页查询 -->
    <select id="listBlog" parameterType="Map" resultMap="BlogResult">
        SELECT * FROM t_blog 
		 <where>
			<if test="title!=null and title!=''">
		 		and title like #{title}
		 	</if>
		 	<if test="typeId!=null and typeId!=''">
		 		and type_id=#{typeId}
		 	</if>
		 	<if test="releaseDateStr!=null and releaseDateStr!=''">
		 		and DATE_FORMAT(releaseDate,'%Y年%m月')=#{releaseDateStr}
		 	</if>
		 </where>
		 ORDER BY releaseDate DESC
		 <if test="start!=null and pageSize!=null">
		 	limit #{start},#{pageSize}
		 </if>
    </select>
    <select id="getAllBlog" resultMap="BlogResult">
        SELECT * FROM t_blog ORDER BY releaseDate DESC
    </select>
<!--      	获取总数 -->
    <select id="getTotal" parameterType="Map" resultType="Long">
        SELECT COUNT(*) FROM t_blog
        <where>
            <if test="title!=null and title!=''">
                and title like #{title}
            </if>
            <if test="typeId!=null and typeId!=''">
                and type_id=#{typeId}
            </if>
            <if test="releaseDateStr!=null and releaseDateStr!=''">
                and DATE_FORMAT(releaseDate,'%Y年%m月')=#{releaseDateStr}
            </if>
        </where>
    </select>
   <select id="findById" parameterType="Integer" resultMap="BlogResult">
		SELECT * FROM t_blog WHERE id=#{id}
	</select>
    <update id="update" parameterType="Blog">
        update t_blog
        <set>
            <if test="title!=null and title!=''">
                title=#{title},
            </if>
            <if test="summary!=null and summary!=''">
                summary=#{summary},
            </if>
            <if test="content!=null and content!=''">
		 		content=#{content},
		 	</if>
		 	<if test="blogType.id!=null">
				type_id=#{blogType.id},
			</if>
			<if test="clickHit!=null">
				clickHit=#{clickHit},
			</if>
			<if test="replyHit!=null">
				replyHit=#{replyHit},
			</if>
			<if test="keyWord!=null and keyWord!=''">
		 		keyWord=#{keyWord},
		 	</if>
		</set>
		where id=#{id}
    </update>
    <select id="getPrevBlog" parameterType="Date" resultMap="BlogResult">
        SELECT * FROM t_blog WHERE releaseDate &gt;#{releaseDate}  ORDER BY releaseDate ASC  LIMIT 1
    </select>
      <select id="getNextBlog" parameterType="Date" resultMap="BlogResult">
        SELECT * FROM t_blog WHERE releaseDate &lt;#{releaseDate}  ORDER BY releaseDate DESC LIMIT 1
    </select>
    <insert id="addBlog" keyProperty="id" parameterType="Blog" useGeneratedKeys="true">  
        INSERT INTO t_blog VALUES(null,#{title},#{summary},now(),0,0,#{content},#{keyWord},#{blogType.id}) 
<!-- 	insert into t_blogtype (typeName,orderNum) values(#typeName,#orderNum) -->
    </insert>  
<!--     <insert id="addBlog"  parameterType="Blog" > -->
<!--        INSERT INTO t_blog(id,title,type_id) VALUES(#{id},#{title},#{blogType.id}) -->
<!--     </insert> -->
    <delete id="deleteBlog" parameterType="Integer">
        delete from t_blog where id=#{id}
    </delete>
    <select id="getBlogByTypeId" parameterType="Integer" resultType="Integer">
        select count(*) from t_blog where type_id=#{typeId}
    </select>
    <select id="listBlogByTypeId" parameterType="Map" resultMap="BlogResult">
        SELECT * FROM t_blog
         Where type_id=#{typeId}
		 ORDER BY releaseDate DESC
		 <if test="start!=null and pageSize!=null">
		 	limit #{start},#{pageSize}
		 </if>
    </select>
    <select id="getTotalByType" parameterType="Integer" resultType="Long">
        SELECT COUNT(*) FROM t_blog
       Where type_id=#{typeId}
    </select>
<!--     <select id="listByPage" parameterType="Map" resultMap="BlogResult"> -->
<!--          SELECT * FROM t_blog  -->
		
<!-- 		 ORDER BY releaseDate DESC -->
<!-- 		 	limit #{start1},#{pageSize} -->
<!-- 		 </if> -->
<!--     </select> -->
</mapper>


//===============

service层：

package com.liu.service;

import java.util.Date;
import java.util.List;
import java.util.Map;

import com.liu.model.Blog;

public interface BlogService {
	public List<Blog> getBlogData();
	public List<Blog> listBlog(Map<String,Object>map);
	public Long getTotal(Map<String, Object>map);
	public Blog findById(Integer id);
	public Integer update(Blog blog);
	public Blog getPrevBlog(Date releaseDate);
	public Blog getNextBlog(Date releaseDate);
	public Integer addBlog(Blog blog);
	public Integer deleteBlog(Integer id);
	public Integer getBlogByTypeId(Integer typeId);
	public List<Blog> getAllBlog();
	public List<Blog> listBlogByTypeId(Map<String, Object> map); 
	public Long getTotalByType(Integer id);
}


//=============

service实现层


package com.liu.service;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Service;

import com.liu.dao.BlogDao;
import com.liu.model.Blog;
@Service("blogService")
public class BlogServiceImpl implements BlogService {
	@Resource
	private BlogDao blogDao;
	public List<Blog> getBlogData() {
		return blogDao.getBlogData();
	}

	public List<Blog> listBlog(Map<String,Object>map) {

		return blogDao.listBlog(map);
	}

	public Long getTotal(Map<String, Object> map) {

		return blogDao.getTotal();
	}

	public Blog findById(Integer id) {

		return blogDao.findById(id);
	}

	public Integer update(Blog blog) {

		return blogDao.update(blog);
	}


	public Integer addBlog(Blog blog) {
		// TODO Auto-generated method stub
		return blogDao.addBlog(blog);
	}

	public Integer deleteBlog(Integer id) {
		// TODO Auto-generated method stub
		return blogDao.deleteBlog(id);
	}

	public Integer getBlogByTypeId(Integer typeId) {
		// TODO Auto-generated method stub
		return blogDao.getBlogByTypeId(typeId);
	}

	public List<Blog> getAllBlog() {
		// TODO Auto-generated method stub
		return blogDao.getAllBlog();
	}

	public List<Blog> listBlogByTypeId(Map<String, Object> map) {
		return blogDao.listBlogByTypeId(map);
	}

	public Long getTotalByType(Integer id) {
		// TODO Auto-generated method stub
		return blogDao.getTotalByType(id);
	}

	public Blog getPrevBlog(Date releaseDate) {
		// TODO Auto-generated method stub
		return blogDao.getPrevBlog(releaseDate);
	}

	public Blog getNextBlog(Date releaseDate) {
		// TODO Auto-generated method stub
		return blogDao.getNextBlog(releaseDate);
	}

}


//====================

package com.liu.controller;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;
import org.springframework.beans.factory.annotation.Required;
import org.springframework.http.HttpRequest;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.liu.Utils.DateUtil;
import com.liu.Utils.PageUtil;
import com.liu.Utils.StringUtil;
import com.liu.lucene.BlogIndex;
import com.liu.model.Blog;
import com.liu.model.BlogType;
import com.liu.model.Blogger;
import com.liu.model.Comment;
import com.liu.model.Link;
import com.liu.model.PageBean;
import com.liu.model.Photo;
import com.liu.service.BlogService;
import com.liu.service.BlogTypeService;
import com.liu.service.BloggerService;
import com.liu.service.CommentService;
import com.liu.service.LinkService;
import com.liu.service.PhotoServiceImpl;


/**
 * 
    * @ClassName: BlogController  
    * @Description: 前台博客信息展示
    * @author sunlei  
    *
 */
@Controller
@RequestMapping("/blog")
public class BlogController {
	@Resource
	private BlogService blogService;
	@Resource
	private CommentService commentService;
	@Resource
	private BloggerService bloggerService;
	@Resource
	private LinkService linkService;
	@Resource
	private BlogTypeService blogTypeService;
	@Resource
	private PhotoServiceImpl photoServiceImpl;
	private BlogIndex blogIndex = new BlogIndex();// 博客索引


	
	
	/**
	 * 
	    * @Title: blogByPage  
	    * @Description: TODO(显示当前页的博客内容)  
	    * @param @param nowPage
	    * @param @return
	    * @param @throws Exception    参数  
	    * @return ModelAndView    返回类型  
	    * @throws
	 */
	@RequestMapping("/{nowPage}")
	public ModelAndView blogByPage(@PathVariable("nowPage") Integer nowPage) throws Exception {
		ModelAndView modelAndView = new ModelAndView();
		int pageSize = 5;
		int blogcounts = blogService.getAllBlog().size();// 获取博客总数
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("start", (nowPage - 1) * pageSize);
		map.put("pageSize", pageSize);
		List<Blog> blogByPage = blogService.listBlog(map);
		for (Blog blog : blogByPage) {
			blog.setReleaseDateStr(DateUtil.formatString2(blog.getReleaseDate().toString()));
		}
		
		//ceil()获取不小于它的最小整数
		int totalPage = (int) Math.ceil(blogcounts * 1.0 / pageSize);// 获取总的页数
		
		modelAndView.addObject("blogList", blogByPage);
		modelAndView.addObject("firsttotalPage", totalPage);
		modelAndView.addObject("firstnowPage", nowPage);
		modelAndView.setViewName("index");
		return modelAndView;
	}



	/**
	 * 
	    * @Title: details  
	    * @Description: TODO(根据传入id获取博客明细内容)  
	    * @param @param id
	    * @param @param request
	    * @param @return
	    * @param @throws Exception    参数  
	    * @return ModelAndView    返回类型  
	    * @throws
	 */
	@RequestMapping("/articles/{id}")
	public ModelAndView details(@PathVariable("id") Integer id, HttpServletRequest request) throws Exception {
		ModelAndView modelAndView = new ModelAndView();
		Blog blog = blogService.findById(id);
		// 获取关键字
		String keyWords = blog.getKeyWord();
		if (StringUtil.isNotEmpty(keyWords))// 显示关键字
		{
			String[] strArray = keyWords.split(" ");
			List<String> keyWordList = StringUtil.filterWhite(Arrays.asList(strArray));
			modelAndView.addObject("keyWords", keyWordList);
		} else {
			modelAndView.addObject("keyWords", null);
		}
		blog.setReleaseDateStr(DateUtil.formatString(blog.getReleaseDate().toString()));
		Date date = blogService.findById(id).getReleaseDate();
		modelAndView.addObject("preBlog", blogService.getPrevBlog(date));// 获取前一篇博客
		modelAndView.addObject("nextBlog", blogService.getNextBlog(date));// 获取下一篇博客
		modelAndView.addObject("blog", blog);
		blog.setClickHit(blog.getClickHit() + 1);// 点击量+1
		blogService.update(blog);// 修改博客信息
		// 查询评论信息
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("blogId", blog.getId());
		map.put("state", 1);
		List<Comment> commentList = commentService.getCommentData(map);
		Long totalcomments = commentService.getTotal(map);
		modelAndView.addObject("commentList", commentList);// 评论信息
		modelAndView.addObject("totalComments", totalcomments);
		// modelAndView.addObject("commonPage",
		// "foreground/blog/blogDetail.jsp");//明细的页面
		// modelAndView.addObject("title", blog.getTitle()+":provencesl的博客");//标题
		// modelAndView.addObject("pageCode",
		// PageUtil.getPrevAndNextPageCode(blogService.getPrevBlog(id),
		// blogService.getNextBlog(id),request.getServletContext().getContextPath()));//上一篇与下一篇
		modelAndView.setViewName("detail");// 跳转的页面
		return modelAndView;
	}


	
	/**
	 * 
	    * @Title: blogcategory  
	    * @Description: TODO(获取博客类别)  
	    * @param @return    参数  
	    * @return ModelAndView    返回类型  
	    * @throws
	 */
	@RequestMapping("/category")
	public ModelAndView blogcategory() {
		ModelAndView modelAndView = new ModelAndView();
		int categoryNum = blogTypeService.getBlogTypeData().size();
		List<BlogType> blogTypeList = blogTypeService.getBlogTypeData();
		for (int i = 0; i < blogTypeList.size(); i++) {
			blogTypeList.get(i).setBlogCount(blogService.getBlogByTypeId(blogTypeList.get(i).getId()));
		}
		modelAndView.addObject("blogTypeList", blogTypeList);
		modelAndView.addObject("blogTypeNum", categoryNum);
		modelAndView.setViewName("category");
		return modelAndView;
	}


	
	/**
	 * 
	    * @Title: categories  
	    * @Description: TODO(根据类别获取对应所有博客)  
	    * @param @param cid
	    * @param @return
	    * @param @throws Exception    参数  
	    * @return ModelAndView    返回类型  
	    * @throws
	 */
	@RequestMapping("/categories/{categoryid}")
	public ModelAndView categories(@PathVariable("categoryid") Integer cid) throws Exception {
		ModelAndView modelAndView = new ModelAndView();
		BlogType blogType = blogTypeService.getById(cid);
		modelAndView.addObject("categoryName", blogType.getTypeName());
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("typeId", cid);
		List<Blog> listBlogByType = blogService.listBlogByTypeId(map);
		
		for (int i = 0; i < listBlogByType.size(); i++) {
			listBlogByType.get(i)
					.setReleaseDateStr(DateUtil.formatString1(listBlogByType.get(i).getReleaseDate().toString()));
		}
		
		modelAndView.addObject("ListBycategory", listBlogByType);
		modelAndView.setViewName("categories");
		return modelAndView;
	}


	
	/**
	 * 
	    * @Title: archives  
	    * @Description: TODO(根据页数进行归档)  
	    * @param @param nowPage
	    * @param @return
	    * @param @throws Exception    参数  
	    * @return ModelAndView    返回类型  
	    * @throws
	 */
	@RequestMapping("/archive/{nowpage}")
	public ModelAndView archives(@PathVariable("nowpage") Integer nowPage) throws Exception {
		ModelAndView modelAndView = new ModelAndView();
		int blogcounts = blogService.getAllBlog().size();
		int pageSize = 5;
		Map<String, Object> map = new HashMap<String, Object>();
		//获取不小于它的最小整数
		int totalPage = (int) Math.ceil(blogcounts * 1.0 / pageSize);
		map.put("start", (nowPage - 1) * pageSize);
		map.put("pageSize", pageSize);
		List<Blog> archivelist = blogService.listBlog(map);
		
		for (int i = 0; i < archivelist.size(); i++) {
			archivelist.get(i)
					.setReleaseDateStr(DateUtil.formatString1(archivelist.get(i).getReleaseDate().toString()));
		}
		
		modelAndView.addObject("firstdate", DateUtil.formatString3(archivelist.get(0).getReleaseDate().toString()));
		modelAndView.addObject("blogcount", blogcounts);
		modelAndView.addObject("archivelist", archivelist);
		modelAndView.addObject("nowPage", nowPage);
		modelAndView.addObject("totalPage", totalPage);
		modelAndView.setViewName("archive");
		return modelAndView;
	}


	/**
	 * 
	    * @Title: tags  
	    * @Description: TODO(获取所有的标签)  
	    * @param @return    参数  
	    * @return ModelAndView    返回类型  
	    * @throws
	 */
	@RequestMapping("/tags")
	public ModelAndView tags() {
		ModelAndView modelAndView = new ModelAndView();
		List<BlogType> tagsList = blogTypeService.getBlogTypeData();
		List<Link> linksList = linkService.getLinkData();
		int tagsTotal = blogTypeService.getBlogTypeData().size();
		int linkTotal = linkService.getLinkData().size();
		int alltotals = tagsTotal + linkTotal;
		modelAndView.addObject("tagsTotal", alltotals);
		modelAndView.addObject("tagsList", tagsList);
		modelAndView.addObject("linksList", linksList);
		modelAndView.setViewName("tags");
		return modelAndView;
	}


	
	/**
	 * 
	    * @Title: tagsById  
	    * @Description: TODO(根据标签获取明细博客)  
	    * @param @param tid
	    * @param @return
	    * @param @throws Exception    参数  
	    * @return ModelAndView    返回类型  
	    * @throws
	 */
	@RequestMapping("/tag/{tagid}")
	public ModelAndView tagsById(@PathVariable("tagid") Integer tid) throws Exception {
		ModelAndView modelAndView = new ModelAndView();
		BlogType blogType = blogTypeService.getById(tid);
		modelAndView.addObject("tagName", blogType.getTypeName());
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("typeId", tid);
		List<Blog> listBlogtags = blogService.listBlogByTypeId(map);
		for (int i = 0; i < listBlogtags.size(); i++) {
			listBlogtags.get(i)
					.setReleaseDateStr(DateUtil.formatString1(listBlogtags.get(i).getReleaseDate().toString()));
		}
		modelAndView.addObject("ListBytag", listBlogtags);
		modelAndView.setViewName("tagsdetail");
		return modelAndView;
	}


	/**
	 * 
	    * @Title: upload  
	    * @Description: TODO(上传图片)  
	    * @param @param file
	    * @param @param request
	    * @param @param model
	    * @param @return    参数  
	    * @return String    返回类型  
	    * @throws
	 */
	@RequestMapping("/upload")
	public String upload(@RequestParam(value = "file", required = true) MultipartFile file, HttpServletRequest request,
			ModelMap model) {
		String path = request.getSession().getServletContext().getRealPath("upload");
		String fileName = file.getOriginalFilename();// 获取图片名称
		File targetFile = new File(path, fileName);
		if (!targetFile.exists()) {
			targetFile.mkdirs();
		}
		try {
			file.transferTo(targetFile);
		} catch (Exception e) {
			e.printStackTrace();
		}
		Photo photo = new Photo();
		if (!fileName.equals("")) {
			photo.setPhotoName("upload/" + fileName);
			photoServiceImpl.insertphoto(photo);
			model.addAttribute("fileUrl", request.getContextPath() + "/upload" + fileName);
		}
		return "redirect:/blog/searchphoto";

	}

	// 检索全文
	@RequestMapping("/search")
	public ModelAndView search(@RequestParam(value = "q", required = false) String q,
			@RequestParam(value = "page", required = false) String page, HttpServletRequest request) throws Exception {
		SimpleDateFormat format = new SimpleDateFormat("MM-dd");
		int pageSize = 10;
		ModelAndView modelAndView = new ModelAndView();
		List<Blog> blogIndexList = blogIndex.searchBlog(q);// 对输入的内容进行检索
		if (page == null) {
			page = "1";
		}
		// int fromIndex=(Integer.parseInt(page)-1)*pageSize;//起始位置
		// Integer
		// toIndex=blogIndexList.size()>=Integer.parseInt(page)*pageSize?Integer.parseInt(page)*pageSize:blogIndexList.size();//显示最多10个或或总个数
		modelAndView.addObject("blogIndexList", blogIndexList);// 截取字符串
		modelAndView.addObject("pageCode", PageUtil.getUpAndDownPageCode(Integer.parseInt(page), blogIndexList.size(),
				q, pageSize, request.getServletContext().getContextPath()));
		modelAndView.addObject("q", q);
		modelAndView.addObject("resultTotal", blogIndexList.size());
		modelAndView.setViewName("searchResult");
		return modelAndView;
	}


	//===========================关于首页的分页显示

	@RequestMapping("/index/{id}")
	public ModelAndView refreshBlog(@PathVariable("id") Integer id, HttpServletRequest request)// 分页显示首页
	{
		ModelAndView modelAndView = new ModelAndView();
		ServletContext application = request.getSession().getServletContext();
		// List<Blog> blogList=blogService.getAllBlog();
		PageBean pageBean = new PageBean(id, 10);
		Map map = new HashMap<String, Object>();
		map.put("start", pageBean.getPage());
		map.put("pageSize", pageBean.getPageSize());
		List<Blog> blogList = blogService.listBlog(map);
		modelAndView.addObject("nowPage", id);
		Map map1 = new HashMap<String, Object>();
		Long total = blogService.getTotal(map1);
		Double num = Math.ceil((double) total / 10);
		modelAndView.addObject("allPage", num.intValue());
		int[] array = new int[num.intValue()];
		for (int i = 0; i < num.intValue(); i++) {
			array[i] = i + 1;
		}
		modelAndView.addObject("allPage1", array);
		try {
			for (int i = 0; i < blogList.size(); i++) {
				List<String> list = new ArrayList<String>();
				blogList.get(i).setReleaseDateStr(DateUtil.formatString(blogList.get(i).getReleaseDate().toString()));
				String imageString = blogList.get(i).getContent();
				Document document = Jsoup.parse(imageString);
				Elements element = document.select("img[src$=.jpg]");
				for (int j = 0; j < element.size(); j++) {
					if (j == 3)
						break;
					list.add(element.get(j).attr("src"));
				}
				blogList.get(i).setImageList(list);
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		application.setAttribute("blogList", blogList);
		Blogger blogger = bloggerService.getBloggerData();
		blogger.setPassword(null);
		application.setAttribute("blogger", blogger);
		List<Link> linkList = linkService.getLinkData();
		application.setAttribute("linkList", linkList);
		List<BlogType> blogTypeList = blogTypeService.getBlogTypeData();
		application.setAttribute("blogTypeList", blogTypeList);
		System.out.println("blogtypesize:" + blogTypeList.size());
		// BlogService blogService=(BlogService)
		// applicationContext.getBean("blogService");
		List<Blog> blogTimeList = blogService.getBlogData();
		application.setAttribute("blogTimeList", blogTimeList);
		modelAndView.setViewName("index");
		return modelAndView;
	}
}
